name: Test Argo Workflow with Kind

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write  # Allows reading and writing repository contents

jobs:
  test-argo-workflow:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest changes from the PR branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4 

      - name: List content
        run: |
          echo ${{ github.event.pull_request.head.ref }}
          echo ${{ github.event.pull_request.head.repo.full_name }}
          ls -ltra
          pwd

      - name: Install Dependencies                                                                                                                                                                                                                                          
        run: |
          sudo apt update && sudo apt install -y curl jq wget
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get install -y helm

      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/bin

      - name: Install kubeseal
        run: |
          wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.26.0/kubeseal-0.26.0-linux-amd64.tar.gz
          tar xzf kubeseal-0.26.0-linux-amd64.tar.gz
          sudo mv kubeseal /usr/bin

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create Kind cluster
        run: kind create cluster --name argo-test-cluster

      - name: Configure kubectl for Kind
        run: kubectl cluster-info --context kind-argo-test-cluster

      - name: Install Argo Workflows
        run: |
          kubectl create namespace argo
          kubectl create namespace argo-events
          kubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo-workflows/main/manifests/quick-start-minimal.yaml
          # Wait for Argo Workflows components to be ready
          kubectl rollout status deployment/argo-server -n argo --timeout=300s

      - name: Install Argo CLI
        run: |
          curl -sLO https://github.com/argoproj/argo-workflows/releases/latest/download/argo-linux-amd64.gz
          gunzip argo-linux-amd64.gz
          chmod +x argo-linux-amd64
          sudo mv argo-linux-amd64 /usr/local/bin/argo
          argo version

      - name: Apply WorkflowTemplates from Repository
        run: |
          pwd
          ls -ltra

          for file in workflows/argo-events/workflowtemplates/*.yaml; do
            echo "Applying workflow template: $file"
            kubectl apply -n argo-events -f $file
          done
          
          # Verify that WorkflowTemplates were created
          kubectl get workflowtemplates -n argo-events

      - name: Submit Workflows from Templates
        run: |
          set -x
          # Submit each workflow template by name
          for file in workflows/argo-events/workflowtemplates/*.yaml; do
            workflow_name=$(basename "$file" .yaml)
            echo "Submitting workflow: $workflow_name"
            if [ $workflow_name == "enroll-server" ]; then
              echo "argo submit --from workflowtemplate/$workflow_name -n argo-events -p ip_address=1.2.3.4"
              argo submit --from workflowtemplate/$workflow_name -n argo-events -p ip_address="1.2.3.4"
            elif [ $workflow_name == "keystone-event-project" ]; then
              echo "argo submit --from workflowtemplate/$workflow_name -n argo-events -p project_uuid=asdf -p event_type=memory_device_status"
              argo submit --from workflowtemplate/$workflow_name -n argo-events -p project_uuid="asdf" -p event_type=memory_device_status
            elif [ $workflow_name == "nautobot-api" ]; then
              echo "argo submit --from workflowtemplate/$workflow_name -n argo-events -p uri=/"
              argo submit --from workflowtemplate/$workflow_name -n argo-events -p uri="/"
            elif [ $workflow_name == "sync-provision-state-to-nautobot" ]; then
              echo "pass"
            elif [ $workflow_name == "undersync-device" ]; then
              argo submit --from workflowtemplate/$workflow_name -n argo-events -p interface_mac="00:aa:bb:cc:dd:ee" -p device_uuid="11223344" -p network_name="blah" -p network_id=123 -p force=False -p dry_run=True
            elif [ $workflow_name == "undersync-switch" ]; then
              argo submit --from workflowtemplate/$workflow_name -n argo-events -p switch_uuids="11223344" -p force=False -p dry_run=True
            else
              argo submit --from workflowtemplate/$workflow_name -n argo-events
            fi
          done

      - name: Verify Workflow Status
        run: |
          argo list -n argo-events
          # Ensure all workflows completed successfully
          # for template in "${WORKFLOW_TEMPLATES[@]}"; do
          #   template_name=$(basename "$template" .yaml)
          #   argo get -n argo-events @latest --from workflowtemplate/$template_name
          # done

      # - name: Verify Workflow Status
      #   run: |
      #     # Ensure the workflow completed successfully
      #     argo get -n argo-events @latest

      - name: Delete Kind cluster
        if: always()
        run: kind delete cluster --name argo-test-cluster
